Functions : Passed as spaces
  fName X Y = fName(X,Y) //for C

  doubleSmallNumber x = if x > 100
                          then x
                          else x*2

  doubleSmallNumber' x = (if x > 100 then x else x*2) + 1
- In Haskell you need the else
- Also note that ' can be apart of function names
- functions cannot start with a CAPS
- Function order does not matter in Haskell

LISTS
- lists are a homogenous data structure

++ is append

 ++ is used to combine two lists together
 1,2,3,4] ++ [9,10,11,12]
      [1,2,3,4,9,10,11,12]

"hello" ++ " " ++ "world"
      "hello world" 

: is cons
This puts at the beginning of the list => can be used to save time
  element : list

If you want to get an element out of a list by index, use !!. 0 indexed
9.4,33.2,96.2,11.2,23.25] !! 1
      33.2

*lists can hold other lists but have to be of same time

When using <, <=, > and >= to compare lists, they are compared in lexicographical
order. First the heads are compared. If they are equal then the second elements
are compared, etc.

Other operators

head: takes a list and returns its head.
tail: takes a list and returns its tail. In other words, it chops off a list's head.
last: takes a list and returns its last element.
init: takes a list and returns everything except its last element.
length: takes a list and returns its length, obviously.
null: checks if a list is empty. If it is, it returns True, otherwise it returns False
reverse: reverses a list.
take: takes number and a list. It extracts that many elements from the beginning of the list.
drop: works in a similar way, only it drops the number of elements from the beginning of a list.
maximum: takes a list of stuff that can be put in some kind of order and returns the biggest element.
minimum: returns the smallest
sum: takes a list of numbers and returns their sum..
product: takes a list of numbers and returns their product.

elem takes a thing and a list of things and tells us if that thing is an element
of the list. It's usually called as an infix function because it's easier to read that way.

ghci> 4 `elem` [3,4,5,6]
    True
ghci> 10 `elem` [3,4,5,6]
    False

***IF YOU FEED IT AN EMPTY LIST HASKELL WITH CRASH

- You can also specify a range to make things easier
[1..20]  = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
[2,4..20] = [2,4,6,8,10,12,14,16,18,20]
- The second number specifies the step

cycle takes a list and cycles it into an infinite list.
If you just try to display the result, it will go on forever so you have to slice it off somewhere.

repeat takes an element and produces an infinite list of just that element. It's like cycling a list with only one element.

Although it's simpler to just use the replicate function if you want some number of the same element in a list.
replicate 3 10 returns [10,10,10].

Can do fancy things with list comprehension
  [x*2 | x <- [1..10]] make list multiple by 2
  [x*2 | x <- [1..10], x*2 >= 12]  - can add a condition / predicate - goes after the comma

  [ x | x <- [50..100], x `mod` 7 == 3] creates this list [52,59,66,73,80,87,94]
  boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]

You can have multiple predicates if you desire

    length' xs = sum [1 | _ <- xs]

    replace the list x with _ and pipe with 1 then add it up --> this returns the length

    removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]  -> remove upper case

* You can also nest them if you want
    ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]
    ghci> [ [ x | x <- xs, even x ] | xs <- xxs]

Tuples : These are like lists but they do not have to be homogenous
  - They have to have  set size however

  fst takes a pair and returns its first component.
  snd takes a pair and returns its second component. Surprise!

snd (8,11)

  These functions only work on pairs

A cool function that produces a list of pairs: zip
  ghci> zip [1,2,3,4,5] [5,5,5,5,5]
    [(1,5),(2,5),(3,5),(4,5),(5,5)]
ghci> zip [1 .. 5] ["one", "two", "three", "four", "five"]
    [(1,"one"),(2,"two"),(3,"three"),(4,"four"),(5,"five")]
